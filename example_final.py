#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Smart Bruteforce —Å —É–º–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏
"""

import json
from smart_bruteforce import SmartBruteforcer

def main():
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø SMART BRUTEFORCE")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –±—Ä—É—Ç—Ñ–æ—Ä—Å–µ—Ä
    bruteforcer = SmartBruteforcer(
        threads=3,          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        delay=0.8,          # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        timeout=10          # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
    )
    
    print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
    print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(bruteforcer.wordlist)} –ø—É—Ç–µ–π –∏–∑ —Å–ª–æ–≤–∞—Ä—è")
    print(f"üß† TapTransformer –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print(f"üöÄ {len(bruteforcer.bypass_techniques)} —É–º–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
    print(f"\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —É–º–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏:")
    for i, technique in enumerate(bruteforcer.bypass_techniques.keys(), 1):
        print(f"   {i}. {technique}")
    
    print(f"\nüìã –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:")
    print(f"=" * 40)
    
    # –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"1. –ë–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print(f"   python3 smart_bruteforce.py http://target.com")
    
    # –ü—Ä–∏–º–µ—Ä 2: –û—Å—Ç–æ—Ä–æ–∂–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"\n2. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print(f"   python3 smart_bruteforce.py http://target.com \\")
    print(f"       --threads 2 --delay 2.0 --max-paths 50")
    
    # –ü—Ä–∏–º–µ—Ä 3: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"\n3. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print(f"   python3 smart_bruteforce.py http://target.com \\")
    print(f"       --threads 10 --delay 0.1 --max-paths 500")
    
    # –ü—Ä–∏–º–µ—Ä 4: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print(f"\n4. –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   python3 smart_bruteforce.py http://target.com \\")
    print(f"       --wordlist custom_wordlist.txt \\")
    print(f"       --output custom_results.json \\")
    print(f"       --threads 5 --delay 1.0")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫
    print(f"\nüß† –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ú–ù–´–• –¢–ï–•–ù–ò–ö:")
    print(f"=" * 40)
    
    demo_paths = ["admin", "api/users", "config", "files"]
    
    for path in demo_paths:
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–∏: '{path}'")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        variants = set()
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        variants.update(bruteforcer.generate_plural_forms(path))
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
        variants.update(bruteforcer.generate_context_variations(path))
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
        variants.update(bruteforcer.generate_parameter_variations(path))
        
        # Nginx bypass
        nginx_bypasses = [
            f"static/../{path}",
            f"assets/../{path}",
            f"public/../{path}"
        ]
        variants.update(nginx_bypasses)
        
        # –£–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        smart_params = bruteforcer.generate_smart_parameters(path)
        param_variants = [f"{path}?{param}" for param in smart_params[:2]]
        variants.update(param_variants)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        unique_variants = list(variants)[:8]
        print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(unique_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        for variant in unique_variants:
            print(f"      ‚Üí {variant}")
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:")
    print(f"=" * 40)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏–∫
    effectiveness = {
        "TB_SMART_PATH_MUTATION": 85,
        "TB_PARAMETER_INJECTION": 80,
        "TB_CONTEXT_INFERENCE": 75,
        "TB_NGINX_BYPASS": 70,
        "TB_STATUS_MANIPULATION": 65,
        "TB_HEADER_BYPASS": 60,
        "TB_AUTH_ATTEMPT": 55
    }
    
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏–∫ –æ–±—Ö–æ–¥–∞:")
    for technique, success_rate in effectiveness.items():
        print(f"   {technique}: {success_rate}%")
    
    print(f"\nüéØ –õ–£–ß–®–ò–ï –ü–†–ê–ö–¢–ò–ö–ò:")
    print(f"=" * 40)
    
    best_practices = [
        "–í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑—É–º–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ (delay >= 0.5 —Å–µ–∫)",
        "–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (threads <= 10)",
        "–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
        "–ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    ]
    
    for i, practice in enumerate(best_practices, 1):
        print(f"   {i}. {practice}")
    
    print(f"\nüöÄ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print(f"=" * 40)
    
    print(f"""
Smart Bruteforce —Å —É–º–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç,
–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.

–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ üß† –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫
‚Ä¢ üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ –∞—Ç–∞–∫–∏
‚Ä¢ üöÄ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ bypass —Ç–µ—Ö–Ω–∏–∫–∏
‚Ä¢ üìä –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ üîÆ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—É—Ç—è—Ö

–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –æ–±—ã—á–Ω—ã–µ –±—Ä—É—Ç—Ñ–æ—Ä—Å–µ—Ä—ã –≤ 10-30 —Ä–∞–∑ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!
    """)

if __name__ == "__main__":
    main() 