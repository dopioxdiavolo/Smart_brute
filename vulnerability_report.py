#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —É—è–∑–≤–∏–º–æ—Å—Ç—è–º
"""

import json
import argparse
from typing import List, Dict, Any
from datetime import datetime


class VulnerabilityReporter:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º"""
    
    def __init__(self):
        self.severity_mapping = {
            200: "üü¢ LOW",      # –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏
            301: "üü° MEDIUM",   # –†–µ–¥–∏—Ä–µ–∫—Ç—ã
            302: "üü° MEDIUM",   # –†–µ–¥–∏—Ä–µ–∫—Ç—ã
            401: "üü† HIGH",     # –ü—Ä–æ–±–ª–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            403: "üü† HIGH",     # –ü—Ä–æ–±–ª–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            500: "üî¥ CRITICAL", # –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏
            503: "üü† HIGH"      # –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
        }
        
        self.technique_descriptions = {
            'TB_HEADER_BYPASS': '–û–±—Ö–æ–¥ —á–µ—Ä–µ–∑ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—é HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏',
            'TB_NGINX_BYPASS': '–û–±—Ö–æ–¥ Nginx —á–µ—Ä–µ–∑ path traversal',
            'TB_PARAMETER_INJECTION': '–ò–Ω—ä–µ–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è',
            'TB_STATUS_MANIPULATION': '–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è HTTP –º–µ—Ç–æ–¥–∞–º–∏',
            'TB_CONTEXT_INFERENCE': '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö –ø—É—Ç–µ–π',
            'TB_PATH_VARIATION': '–í–∞—Ä–∏–∞—Ü–∏–∏ –ø—É—Ç–µ–π',
            'TB_PARAM_FUZZ': '–§–∞–∑–∑–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
            'TB_REDIRECT_FOLLOW': '–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º',
            'TB_AUTH_ATTEMPT': '–ü–æ–ø—ã—Ç–∫–∏ –æ–±—Ö–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            'TB_RATE_CONTROL': '–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤',
            'TB_DIRECT_ACCESS': '–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Å—É—Ä—Å–∞–º'
        }
    
    def load_scan_results(self, filename: str) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def classify_vulnerabilities(self, results: List[Dict]) -> Dict[str, List[Dict]]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º"""
        classification = {
            'critical': [],      # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            'high': [],         # –í—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
            'medium': [],       # –°—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞
            'low': [],          # –ù–∏–∑–∫–æ–≥–æ —Ä–∏—Å–∫–∞
            'successful_bypasses': [],  # –£—Å–ø–µ—à–Ω—ã–µ –æ–±—Ö–æ–¥—ã
            'interesting_paths': []     # –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—É—Ç–∏
        }
        
        for result in results:
            status = result['status_code']
            
            # –£—Å–ø–µ—à–Ω—ã–µ –æ–±—Ö–æ–¥—ã
            if result.get('success', False):
                classification['successful_bypasses'].append(result)
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
            if status in [500, 502]:
                classification['critical'].append(result)
            elif status in [401, 403, 503]:
                classification['high'].append(result)
            elif status in [301, 302]:
                classification['medium'].append(result)
            elif status == 200:
                classification['low'].append(result)
                classification['interesting_paths'].append(result)
        
        return classification
    
    def generate_html_report(self, results: List[Dict], output_file: str = 'vulnerability_report.html'):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞"""
        classification = self.classify_vulnerabilities(results)
        
        html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ text-align: center; margin-bottom: 30px; }}
        .section {{ margin-bottom: 30px; }}
        .vulnerability {{ background: #f9f9f9; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #ddd; }}
        .critical {{ border-left-color: #dc3545; }}
        .high {{ border-left-color: #fd7e14; }}
        .medium {{ border-left-color: #ffc107; }}
        .low {{ border-left-color: #28a745; }}
        .technique {{ background: #e7f3ff; padding: 5px 10px; margin: 2px; border-radius: 3px; display: inline-block; font-size: 0.8em; }}
        .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 30px; }}
        .stat-card {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; text-align: center; }}
        .path {{ font-family: monospace; background: #f8f9fa; padding: 2px 6px; border-radius: 3px; }}
        table {{ width: 100%; border-collapse: collapse; margin: 15px 0; }}
        th, td {{ padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }}
        th {{ background-color: #f8f9fa; font-weight: bold; }}
        .severity-critical {{ color: #dc3545; font-weight: bold; }}
        .severity-high {{ color: #fd7e14; font-weight: bold; }}
        .severity-medium {{ color: #ffc107; font-weight: bold; }}
        .severity-low {{ color: #28a745; font-weight: bold; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîí –û—Ç—á–µ—Ç –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h1>
            <p>–î–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
        </div>
        
        <div class="stats">
            <div class="stat-card">
                <h3>{len(results)}</h3>
                <p>–í—Å–µ–≥–æ –ø—É—Ç–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ</p>
            </div>
            <div class="stat-card">
                <h3>{len(classification['successful_bypasses'])}</h3>
                <p>–£—Å–ø–µ—à–Ω—ã—Ö –æ–±—Ö–æ–¥–æ–≤</p>
            </div>
            <div class="stat-card">
                <h3>{len(classification['critical']) + len(classification['high'])}</h3>
                <p>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –≤—ã—Å–æ–∫–∏—Ö —Ä–∏—Å–∫–æ–≤</p>
            </div>
            <div class="stat-card">
                <h3>{len(classification['interesting_paths'])}</h3>
                <p>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—É—Ç–µ–π</p>
            </div>
        </div>
        
        <div class="section">
            <h2>üö® –£—Å–ø–µ—à–Ω—ã–µ –æ–±—Ö–æ–¥—ã –∑–∞—â–∏—Ç—ã</h2>
            <p>–ü—É—Ç–∏, –≥–¥–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–π—Ç–∏ –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã:</p>
            <table>
                <thead>
                    <tr>
                        <th>–ü—É—Ç—å</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–¢–µ—Ö–Ω–∏–∫–∏ –æ–±—Ö–æ–¥–∞</th>
                        <th>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å</th>
                    </tr>
                </thead>
                <tbody>
        """
        
        for vuln in classification['successful_bypasses'][:20]:  # –¢–æ–ø-20
            severity = self.severity_mapping.get(vuln['status_code'], "üîµ UNKNOWN")
            techniques = ', '.join(vuln.get('applied_techniques', [])[:3])
            html_content += f"""
                    <tr>
                        <td><span class="path">/{vuln['path']}</span></td>
                        <td>{vuln['status_code']}</td>
                        <td>{techniques}</td>
                        <td class="severity-{severity.split()[1].lower()}">{severity}</td>
                    </tr>
            """
        
        html_content += """
                </tbody>
            </table>
        </div>
        
        <div class="section">
            <h2>üìç –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—É—Ç–∏ (—Å—Ç–∞—Ç—É—Å 200)</h2>
            <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</p>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
        """
        
        for path in classification['interesting_paths'][:20]:
            html_content += f'<div class="vulnerability low"><span class="path">/{path["path"]}</span></div>'
        
        html_content += """
            </div>
        </div>
        
        <div class="section">
            <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Ö–Ω–∏–∫–∞–º</h2>
            <table>
                <thead>
                    <tr>
                        <th>–¢–µ—Ö–Ω–∏–∫–∞</th>
                        <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                        <th>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</th>
                    </tr>
                </thead>
                <tbody>
        """
        
        # –ü–æ–¥—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏–∫
        technique_counts = {}
        for result in results:
            for technique in result.get('applied_techniques', []):
                technique_counts[technique] = technique_counts.get(technique, 0) + 1
        
        for technique, count in sorted(technique_counts.items(), key=lambda x: x[1], reverse=True)[:10]:
            description = self.technique_descriptions.get(technique, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞')
            html_content += f"""
                    <tr>
                        <td><code>{technique}</code></td>
                        <td>{description}</td>
                        <td><strong>{count}</strong></td>
                    </tr>
            """
        
        html_content += """
                </tbody>
            </table>
        </div>
        
        <div class="section">
            <h2>üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é</h2>
            <div class="vulnerability">
                <h4>1. –û–±—Ö–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (TB_HEADER_BYPASS)</h4>
                <p>‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤</p>
                <p>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏</p>
            </div>
            
            <div class="vulnerability">
                <h4>2. Path Traversal (TB_NGINX_BYPASS)</h4>
                <p>‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Ç–µ–π –≤ Nginx</p>
                <p>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤ ../ –∏ encoded paths</p>
            </div>
            
            <div class="vulnerability">
                <h4>3. –ò–Ω—ä–µ–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (TB_PARAMETER_INJECTION)</h4>
                <p>‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ debug-—Ä–µ–∂–∏–º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ</p>
                <p>‚Ä¢ –í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</p>
            </div>
        </div>
        
        <footer style="text-align: center; margin-top: 40px; color: #666;">
            <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω Smart Bruteforce Scanner</p>
        </footer>
    </div>
</body>
</html>
        """
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    def generate_text_report(self, results: List[Dict], output_file: str = 'vulnerability_report.txt'):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        classification = self.classify_vulnerabilities(results)
        
        report = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                         –û–¢–ß–ï–¢ –ü–û –£–Ø–ó–í–ò–ú–û–°–¢–Ø–ú                                ‚ïë
‚ïë                     –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ –ø—É—Ç–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(results)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ–±—Ö–æ–¥–æ–≤: {len(classification['successful_bypasses'])}
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(classification['critical'])}
‚Ä¢ –í—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞: {len(classification['high'])}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞: {len(classification['medium'])}
‚Ä¢ –ù–∏–∑–∫–æ–≥–æ —Ä–∏—Å–∫–∞: {len(classification['low'])}

üö® –£–°–ü–ï–®–ù–´–ï –û–ë–•–û–î–´ –ó–ê–©–ò–¢–´:
"""
        
        for i, vuln in enumerate(classification['successful_bypasses'][:15], 1):
            severity = self.severity_mapping.get(vuln['status_code'], "UNKNOWN")
            techniques = ', '.join(vuln.get('applied_techniques', [])[:3])
            report += f"{i:2d}. /{vuln['path']} [{vuln['status_code']}] {severity}\n"
            report += f"    –¢–µ—Ö–Ω–∏–∫–∏: {techniques}\n\n"
        
        report += "\nüìç –ò–ù–¢–ï–†–ï–°–ù–´–ï –ü–£–¢–ò (200 OK):\n"
        for i, path in enumerate(classification['interesting_paths'][:20], 1):
            report += f"{i:2d}. /{path['path']}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Ö–Ω–∏–∫–∞–º
        technique_counts = {}
        for result in results:
            for technique in result.get('applied_techniques', []):
                technique_counts[technique] = technique_counts.get(technique, 0) + 1
        
        report += "\nüìà –¢–û–ü –¢–ï–•–ù–ò–ö –û–ë–•–û–î–ê:\n"
        for i, (technique, count) in enumerate(sorted(technique_counts.items(), key=lambda x: x[1], reverse=True)[:10], 1):
            description = self.technique_descriptions.get(technique, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞')
            report += f"{i:2d}. {technique}: {count} —Ä–∞–∑\n"
            report += f"    {description}\n\n"
        
        report += """
üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ:

1. –û–ë–•–û–î –ß–ï–†–ï–ó –ó–ê–ì–û–õ–û–í–ö–ò:
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –æ–ø–∞—Å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (X-Real-IP, X-Forwarded-For)
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ whitelist —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   ‚Ä¢ –õ–æ–≥–∏—Ä—É–π—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏

2. PATH TRAVERSAL:
   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nginx
   ‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã ../ –∏ encoded paths
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–≥–∏–µ location –±–ª–æ–∫–∏

3. –ò–ù–™–ï–ö–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í:
   ‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ debug-—Ä–µ–∂–∏–º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
   ‚Ä¢ –í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –≤—Å–µ GET/POST –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ whitelist –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

4. –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–Ø HTTP –ú–ï–¢–û–î–û–í:
   ‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É X-HTTP-Method-Override –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã
   ‚Ä¢ –õ–æ–≥–∏—Ä—É–π—Ç–µ –Ω–µ–æ–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø—Ä–æ—Å–æ–≤

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω Smart Bruteforce Scanner
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞ –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º')
    parser.add_argument('--input', required=True, help='–§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--html', help='–ò–º—è HTML –æ—Ç—á–µ—Ç–∞', default='vulnerability_report.html')
    parser.add_argument('--text', help='–ò–º—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞', default='vulnerability_report.txt')
    parser.add_argument('--format', choices=['html', 'text', 'both'], default='both', help='–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞')
    
    args = parser.parse_args()
    
    reporter = VulnerabilityReporter()
    results = reporter.load_scan_results(args.input)
    
    if args.format in ['html', 'both']:
        reporter.generate_html_report(results, args.html)
    
    if args.format in ['text', 'both']:
        reporter.generate_text_report(results, args.text)
    
    print(f"\n‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(results)} –ø—É—Ç–µ–π")


if __name__ == '__main__':
    main() 