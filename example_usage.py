#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Smart Bruteforce Script —Å TapTransformer
"""

from smart_bruteforce import SmartBruteforcer
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

def check_model_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ TapTransformer –º–æ–¥–µ–ª–∏"""
    model_file = "best_model.pth"
    encoders_file = "encoders.pkl"
    
    has_files = os.path.exists(model_file) and os.path.exists(encoders_file)
    
    try:
        from tap_transformer_model import TapTransformer
        has_import = True
    except ImportError:
        has_import = False
    
    return has_files, has_import

def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–≥–æ –±—Ä—É—Ç—Ñ–æ—Ä—Å–µ—Ä–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
    has_files, has_import = check_model_availability()
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ TapTransformer:")
    print(f"  –§–∞–π–ª—ã –º–æ–¥–µ–ª–∏: {'‚úÖ' if has_files else '‚ùå'}")
    print(f"  –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è: {'‚úÖ' if has_import else '‚ùå'}")
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±—Ä—É—Ç—Ñ–æ—Ä—Å–µ—Ä–∞
    if has_files and has_import:
        print("ü§ñ –ó–∞–ø—É—Å–∫ —Å TapTransformer –º–æ–¥–µ–ª—å—é")
        bruteforcer = SmartBruteforcer(
            wordlist_path='wordlists.txt',
            model_path='best_model.pth',
            encoders_path='encoders.pkl',
            threads=5,
            delay=0.5,
            timeout=5
        )
    else:
        print("üéØ –ó–∞–ø—É—Å–∫ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ")
        if not has_import:
            print("  –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TapTransformer —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install torch scikit-learn")
        if not has_files:
            print("  –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python3 tap_transformer_model.py")
        print()
        
        bruteforcer = SmartBruteforcer(
            wordlist_path='wordlists.txt',
            threads=5,
            delay=0.5,
            timeout=5
        )
    
    # –¶–µ–ª–µ–≤–æ–π URL (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä)
    target_url = "http://httpbin.org"  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
    
    print(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {target_url}")
    print("-" * 60)
    
    # –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ 50 –ø—É—Ç–µ–π
    results = bruteforcer.run_scan(target_url, max_paths=50)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    bruteforcer.save_results(results, 'demo_results.json')
    
    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
    bruteforcer.print_summary(results)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
    print("-" * 60)
    
    for result in results:
        if result.predicted_techniques or result.status_code in [200, 301, 302, 401, 403]:
            print(f"\n–ü—É—Ç—å: {result.path}")
            print(f"  –°—Ç–∞—Ç—É—Å: {result.status_code}")
            print(f"  –¢–∏–ø –∞–Ω–æ–º–∞–ª–∏–∏: {result.anomaly_type}")
            print(f"  –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {result.content_length} –±–∞–π—Ç")
            print(f"  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result.response_time:.2f}s")
            
            if result.predicted_techniques:
                print(f"  –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏: {result.predicted_techniques}")
                print("  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
                for tech, prob in result.technique_probabilities.items():
                    print(f"    {tech}: {prob:.2f}")
            
            if result.applied_techniques:
                print(f"  –ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏: {result.applied_techniques}")
                if result.success:
                    print("  ‚úì –£–°–ü–ï–®–ù–´–ô –û–ë–•–û–î!")
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ demo_results.json")

if __name__ == '__main__':
    main() 