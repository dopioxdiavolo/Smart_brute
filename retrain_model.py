#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ TapTransformer –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import argparse
import json
import torch
import pickle
from tap_transformer_model import main as train_main
from tap_transformer_model import load_vulnerability_data
import shutil
import os


def backup_old_model():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏"""
    if os.path.exists('best_model.pth'):
        shutil.copy('best_model.pth', 'best_model_backup.pth')
        print("‚úì –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–∞: best_model_backup.pth")
    
    if os.path.exists('encoders.pkl'):
        shutil.copy('encoders.pkl', 'encoders_backup.pkl')
        print("‚úì –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —ç–Ω–∫–æ–¥–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: encoders_backup.pkl")


def retrain_model(data_file: str):
    """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print(f"=== –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò –ù–ê –î–ê–ù–ù–´–•: {data_file} ===\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_old_model()
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
    original_file = 'vulnerability.json'
    backup_original = False
    
    if os.path.exists(original_file):
        shutil.copy(original_file, 'vulnerability_original_backup.json')
        backup_original = True
        print("‚úì –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    shutil.copy(data_file, original_file)
    print(f"‚úì –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {data_file}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        train_main()
        print("\n‚úÖ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏: {e}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –º–æ–¥–µ–ª—å
        if os.path.exists('best_model_backup.pth'):
            shutil.copy('best_model_backup.pth', 'best_model.pth')
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å")
        
        if os.path.exists('encoders_backup.pkl'):
            shutil.copy('encoders_backup.pkl', 'encoders.pkl')
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —ç–Ω–∫–æ–¥–µ—Ä—ã")
    
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
        if backup_original:
            shutil.copy('vulnerability_original_backup.json', original_file)
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö")


def compare_models():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
    print("\n=== –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô ===")
    
    if not os.path.exists('best_model_backup.pth'):
        print("‚ùå –ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        with open('combined_vulnerability_data.json', 'r') as f:
            test_data = json.load(f)[:20]  # –ü–µ—Ä–≤—ã–µ 20 –ø—Ä–∏–º–µ—Ä–æ–≤
        
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_data)} –ø—Ä–∏–º–µ—Ä–∞—Ö...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –º–æ–¥–µ–ª–µ–π
        
        old_size = os.path.getsize('best_model_backup.pth')
        new_size = os.path.getsize('best_model.pth')
        
        print(f"–†–∞–∑–º–µ—Ä —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏: {old_size:,} –±–∞–π—Ç")
        print(f"–†–∞–∑–º–µ—Ä –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {new_size:,} –±–∞–π—Ç")
        print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: {((new_size - old_size) / old_size * 100):+.1f}%")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ TapTransformer –º–æ–¥–µ–ª–∏')
    parser.add_argument('--data', required=True, help='–§–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –æ–±—É—á–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
    parser.add_argument('--compare', action='store_true', help='–°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ç–∞—Ä—É—é –∏ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.data):
        print(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.data}")
        return
    
    # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
    retrain_model(args.data)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    if args.compare:
        compare_models()
    
    print("\nüéâ –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üìÅ –§–∞–π–ª—ã:")
    print("  - best_model.pth (–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å)")
    print("  - encoders.pkl (–Ω–æ–≤—ã–µ —ç–Ω–∫–æ–¥–µ—Ä—ã)")
    print("  - best_model_backup.pth (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è)")
    print("  - encoders_backup.pkl (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è)")


if __name__ == '__main__':
    main() 