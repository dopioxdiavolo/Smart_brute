#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã Smart Bruteforce —Å TapTransformer
"""

import os
import subprocess
import sys
import time

def print_step(step_num, title, description):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —à–∞–≥–∞"""
    print(f"\n{'='*60}")
    print(f"–®–ê–ì {step_num}: {title}")
    print(f"{'='*60}")
    print(description)
    print()

def check_file_exists(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    exists = os.path.exists(filename)
    print(f"  {filename}: {'‚úÖ –ù–∞–π–¥–µ–Ω' if exists else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    return exists

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"üöÄ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print("-" * 40)
    
    try:
        result = subprocess.run(
            command.split(),
            capture_output=True,
            text=True,
            timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )
        
        if result.stdout:
            print("STDOUT:")
            print(result.stdout[:1000])  # –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
            if len(result.stdout) > 1000:
                print("... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)")
        
        if result.stderr:
            print("\nSTDERR:")
            print(result.stderr[:500])
            if len(result.stderr) > 500:
                print("... (–æ—à–∏–±–∫–∏ –æ–±—Ä–µ–∑–∞–Ω—ã)")
        
        print(f"\n–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        print("‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç (5 –º–∏–Ω—É—Ç)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø SMART BRUTEFORCE –° TAPTRANSFORMER")
    print("=" * 60)
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    print_step(1, "–ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í", 
               "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    files_to_check = [
        "vulnerability.json",
        "wordlists.txt",
        "tap_transformer_model.py",
        "smart_bruteforce.py",
        "example_usage.py"
    ]
    
    all_files_exist = True
    for filename in files_to_check:
        if not check_file_exists(filename):
            all_files_exist = False
    
    if not all_files_exist:
        print("\n‚ùå –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ.")
        return
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print_step(2, "–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô",
               "–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ Python –ø–∞–∫–µ—Ç—ã")
    
    required_packages = ["torch", "sklearn", "pandas", "requests"]
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"  {package}: ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"  {package}: ‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print("pip install torch scikit-learn pandas requests")
        return
    
    # –®–∞–≥ 3: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print_step(3, "–û–ë–£–ß–ï–ù–ò–ï TAPTRANSFORMER",
               "–û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ vulnerability.json")
    
    if not os.path.exists("best_model.pth"):
        print("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
        success = run_command(
            "python3 tap_transformer_model.py",
            "–û–±—É—á–µ–Ω–∏–µ TapTransformer –º–æ–¥–µ–ª–∏"
        )
        
        if not success:
            print("‚ùå –û–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return
    else:
        print("‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ –æ–±—É—á–µ–Ω–∞ (best_model.pth –Ω–∞–π–¥–µ–Ω)")
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    print_step(4, "–ü–†–û–í–ï–†–ö–ê –ú–û–î–ï–õ–ò",
               "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏")
    
    model_files = ["best_model.pth", "encoders.pkl"]
    model_ready = True
    
    for filename in model_files:
        if not check_file_exists(filename):
            model_ready = False
    
    if not model_ready:
        print("‚ùå –§–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        return
    
    # –®–∞–≥ 5: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    print_step(5, "–¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö",
               "–ó–∞–ø—É—Å–∫–∞–µ–º Smart Bruteforce –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ")
    
    test_command = (
        "python3 smart_bruteforce.py http://httpbin.org "
        "--threads 3 --delay 1 --max-paths 20 --timeout 10 "
        "--output demo_test_results.json"
    )
    
    success = run_command(test_command, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    if success and os.path.exists("demo_test_results.json"):
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        size = os.path.getsize("demo_test_results.json")
        print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {size} –±–∞–π—Ç")
        
    else:
        print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return
    
    # –®–∞–≥ 6: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è example_usage
    print_step(6, "–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø EXAMPLE_USAGE",
               "–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    
    print("–ó–∞–ø—É—Å–∫ example_usage.py...")
    print("(–≠—Ç–æ –ø–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç—É—Å TapTransformer –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã)")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print_step("–§–ò–ù–ê–õ", "–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê",
               "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    print("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! Smart Bruteforce —Å TapTransformer –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print()
    print("–ß—Ç–æ –¥–∞–ª—å—à–µ:")
    print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ —Å–≤–æ–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö")
    print("2. –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã")
    print()
    print("–§–∞–π–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("- smart_bruteforce.py - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç")
    print("- example_usage.py - –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("- best_model.pth - –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
    print("- encoders.pkl - —ç–Ω–∫–æ–¥–µ—Ä—ã")
    print("- demo_test_results.json - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    main() 