#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –æ–±—Ö–æ–¥–∞ –≤ Smart Bruteforce
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏–∫
"""

import json
import time
from smart_bruteforce import SmartBruteforcer
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def demo_smart_techniques():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫"""
    
    print("üß† –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ú–ù–´–• –¢–ï–•–ù–ò–ö –û–ë–•–û–î–ê")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –±—Ä—É—Ç—Ñ–æ—Ä—Å–µ—Ä
    bruteforcer = SmartBruteforcer(
        threads=5,
        delay=0.2,
        timeout=10
    )
    
    # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_cases = [
        {
            "name": "–£–º–Ω–∞—è –º—É—Ç–∞—Ü–∏—è –ø—É—Ç–µ–π",
            "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π",
            "examples": [
                "user -> users, admin, profile, account",
                "admin -> administrator, management, panel",
                "api -> api/v1, api/v2, rest, graphql"
            ]
        },
        {
            "name": "Nginx bypass —Ç–µ—Ö–Ω–∏–∫–∏",
            "description": "–û–±—Ö–æ–¥ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ path traversal",
            "examples": [
                "static/../admin",
                "assets/../config",
                "public/../secret",
                "%2fstatic%2f..%2fadmin"
            ]
        },
        {
            "name": "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∏–Ω—ä–µ–∫—Ü–∏—è",
            "description": "–£–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "examples": [
                "?debug=1&admin=1",
                "?id=1&user_id=0",
                "?file=../config.php",
                "?role=admin&access=1"
            ]
        },
        {
            "name": "–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–≤",
            "description": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ HTTP –º–µ—Ç–æ–¥–æ–≤ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤",
            "examples": [
                "POST –≤–º–µ—Å—Ç–æ GET",
                "X-HTTP-Method-Override: PUT",
                "Content-Type: application/json",
                "Accept: application/xml"
            ]
        },
        {
            "name": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≤—ã–≤–æ–¥",
            "description": "–ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö",
            "examples": [
                "/api/v1/users -> /api/v2/users",
                "/admin/123 -> /admin/0, /admin/1",
                "/config -> /config/backup, /config/old"
            ]
        }
    ]
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∂–¥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
    for i, case in enumerate(demo_cases, 1):
        print(f"\n{i}. {case['name']}")
        print("-" * 40)
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {case['description']}")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        for example in case['examples']:
            print(f"  ‚Ä¢ {example}")
    
    print("\n" + "=" * 60)
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–ê –†–ï–ê–õ–¨–ù–û–ú –ü–†–ò–ú–ï–†–ï")
    print("=" * 60)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –º—É—Ç–∞—Ü–∏–π
    demo_paths = ["user", "admin", "api", "config", "file"]
    
    for path in demo_paths:
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–∏: '{path}'")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º
        plural_forms = bruteforcer.generate_plural_forms(path)
        if plural_forms:
            print(f"  –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: {plural_forms}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π
        context_variations = bruteforcer.generate_context_variations(path)
        if context_variations:
            print(f"  –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏: {context_variations[:5]}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –≤–∞—Ä–∏–∞—Ü–∏–π
        param_variations = bruteforcer.generate_parameter_variations(path)
        if param_variations:
            print(f"  –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏: {param_variations[:3]}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        smart_params = bruteforcer.generate_smart_parameters(path)
        if smart_params:
            print(f"  –£–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {smart_params[:3]}")
    
    print("\n" + "=" * 60)
    print("üîÆ –ö–û–ù–¢–ï–ö–°–¢–ù–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 60)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    context_examples = [
        "api/v1/users",
        "admin/dashboard/123",
        "config/database",
        "files/upload/temp"
    ]
    
    for path in context_examples:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑: '{path}'")
        inferred_paths = bruteforcer.infer_paths_from_context(path)
        if inferred_paths:
            print(f"  –í—ã–≤–µ–¥–µ–Ω–Ω—ã–µ –ø—É—Ç–∏: {inferred_paths[:5]}")
    
    print("\n" + "=" * 60)
    print("üéØ NGINX BYPASS –¢–ï–•–ù–ò–ö–ò")
    print("=" * 60)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Nginx bypass
    target_paths = ["admin", "config", "secret", "private"]
    
    for path in target_paths:
        print(f"\nüöÄ Nginx bypass –¥–ª—è: '{path}'")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è bypass –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        bypass_patterns = [
            f"static/../{path}",
            f"assets/../{path}",
            f"public/../{path}",
            f"/static/../{path}",
            f"//static/../{path}",
            f"./static/../{path}",
            f"%2fstatic%2f..%2f{path}",
            f"static/..;/{path}"
        ]
        
        print(f"  Bypass –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
        for pattern in bypass_patterns[:4]:
            print(f"    ‚Ä¢ {pattern}")
    
    print("\n" + "=" * 60)
    print("‚ú® –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    print("=" * 60)
    
    print("""
–ù–æ–≤—ã–µ —É–º–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä—è—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä—É—Ç—Ñ–æ—Ä—Å–µ—Ä–∞:

1. üß† –£–ú–ù–ê–Ø –ú–£–¢–ê–¶–ò–Ø –ü–£–¢–ï–ô
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º
   - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–º–∞–Ω—Ç–∏–∫–∏
   - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

2. üöÄ NGINX BYPASS
   - –û–±—Ö–æ–¥ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   - Path traversal –∞—Ç–∞–∫–∏
   - URL encoding –≤–∞—Ä–∏–∞—Ü–∏–∏

3. üíâ –ü–ê–†–ê–ú–ï–¢–†–ò–ß–ï–°–ö–ê–Ø –ò–ù–™–ï–ö–¶–ò–Ø
   - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   - –£–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   - –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ–ª–∞–≥–∏

4. üîÑ –°–¢–ê–¢–£–° –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–Ø
   - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã
   - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
   - Content-Type –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏

5. üîÆ –ö–û–ù–¢–ï–ö–°–¢–ù–´–ô –ê–ù–ê–õ–ò–ó
   - –í—ã–≤–æ–¥ –Ω–æ–≤—ã—Ö –ø—É—Ç–µ–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
   - –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä—Å–∏–π API
   - –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö/–¥–æ—á–µ—Ä–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π

–≠—Ç–∏ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ, —Å–æ–∑–¥–∞–≤–∞—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
–ø–æ–∏—Å–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä–∞—è –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """)


def demo_real_world_scenario():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    print("\n" + "=" * 60)
    print("üåê –†–ï–ê–õ–¨–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    discovered_paths = [
        "/api/v1/users",
        "/admin/dashboard", 
        "/config/settings",
        "/files/upload"
    ]
    
    bruteforcer = SmartBruteforcer()
    
    print("üìç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—É—Ç–∏:")
    for path in discovered_paths:
        print(f"  ‚Ä¢ {path}")
    
    print("\nüîç –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø—É—Ç–µ–π:")
    
    all_generated = set()
    
    for path in discovered_paths:
        print(f"\n   –ê–Ω–∞–ª–∏–∑: {path}")
        
        # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª—ç—à –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        clean_path = path.lstrip('/')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–∏–¥—ã –º—É—Ç–∞—Ü–∏–π
        mutations = []
        mutations.extend(bruteforcer.generate_plural_forms(clean_path))
        mutations.extend(bruteforcer.generate_context_variations(clean_path))
        mutations.extend(bruteforcer.generate_parameter_variations(clean_path))
        mutations.extend(bruteforcer.infer_paths_from_context(clean_path))
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º—É—Ç–∞—Ü–∏–∏
        unique_mutations = list(set(mutations))[:5]
        
        for mutation in unique_mutations:
            all_generated.add(mutation)
            print(f"     ‚Üí {mutation}")
    
    print(f"\nüìä –ò—Ç–æ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(all_generated)} –Ω–æ–≤—ã—Ö –ø—É—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Nginx bypass
    print(f"\nüöÄ Nginx bypass —Ç–µ—Ö–Ω–∏–∫–∏:")
    nginx_bypasses = []
    for path in discovered_paths:
        clean_path = path.lstrip('/')
        bypasses = [
            f"static/../{clean_path}",
            f"assets/../{clean_path}",
            f"%2fstatic%2f..%2f{clean_path.replace('/', '%2f')}"
        ]
        nginx_bypasses.extend(bypasses)
    
    for bypass in nginx_bypasses[:8]:
        print(f"     ‚Üí {bypass}")
    
    print(f"\nüí° –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –∏–∑ {len(discovered_paths)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π")
    print(f"   —Å–∏—Å—Ç–µ–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ {len(all_generated) + len(nginx_bypasses)} –Ω–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")


if __name__ == "__main__":
    demo_smart_techniques()
    demo_real_world_scenario() 