#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ -> –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ -> —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import os
import sys
import subprocess
import argparse
import json
import time
from datetime import datetime


def run_command(cmd, description=""):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"\nüîÑ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
    print("-" * 60)
    
    result = subprocess.run(cmd, shell=True, capture_output=False, text=True)
    
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {description}")
        return False
    else:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {description}")
        return True


def clean_old_results():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    files_to_remove = [
        'scan_results.json',
        'improved_scan_results.json', 
        'new_scan_results.json',
        'demo_results.json',
        'demo_test_results.json',
        'best_model.pth',
        'encoders.pkl',
        'best_model_backup.pth',
        'encoders_backup.pkl',
        'new_vulnerability_data.json',
        'combined_vulnerability_data.json'
    ]
    
    print("üßπ –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    for file in files_to_remove:
        if os.path.exists(file):
            os.remove(file)
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {file}")
        else:
            print(f"‚ö™ –ù–µ –Ω–∞–π–¥–µ–Ω: {file}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
    parser = argparse.ArgumentParser(description='–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ–º')
    parser.add_argument('url', help='URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--initial-paths', type=int, default=50, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ–π –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--final-paths', type=int, default=100, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ–π –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--delay', type=float, default=0.3, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏')
    parser.add_argument('--threads', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤')
    parser.add_argument('--skip-clean', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    args = parser.parse_args()
    
    print("üöÄ –ü–û–õ–ù–´–ô –¶–ò–ö–õ SMART BRUTEFORCE –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    print(f"üéØ –¶–µ–ª—å: {args.url}")
    print(f"üìä –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {args.initial_paths} –ø—É—Ç–µ–π")
    print(f"üéØ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {args.final_paths} –ø—É—Ç–µ–π")
    print(f"‚è±Ô∏è  –ó–∞–¥–µ—Ä–∂–∫–∞: {args.delay}—Å")
    print(f"üßµ –ü–æ—Ç–æ–∫–æ–≤: {args.threads}")
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞)
    if not args.skip_clean:
        clean_old_results()
    
    # –®–∞–≥ 2: –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüì° –®–ê–ì 1: –ü–ï–†–í–ò–ß–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï ({args.initial_paths} –ø—É—Ç–µ–π)")
    print("=" * 80)
    
    initial_cmd = f"python3 simple_scan.py {args.url} --max-paths {args.initial_paths} --delay {args.delay} --threads {args.threads} --output initial_scan_results.json"
    
    if not run_command(initial_cmd, "–ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏"):
        print("‚ùå –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if not os.path.exists('initial_scan_results.json'):
        print("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüß† –®–ê–ì 2: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–ë–£–ß–ê–Æ–©–ò–• –î–ê–ù–ù–´–•")
    print("=" * 80)
    
    training_cmd = f"python3 generate_training_data.py --input initial_scan_results.json --output fresh_training_data.json --augment"
    
    if not run_command(training_cmd, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"):
        print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open('vulnerability.json', 'r') as f:
            base_data = json.load(f)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open('fresh_training_data.json', 'r') as f:
            new_data = json.load(f)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º
        combined_data = base_data + new_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open('combined_training_data.json', 'w') as f:
            json.dump(combined_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {len(base_data)} + {len(new_data)} = {len(combined_data)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    # –®–∞–≥ 4: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print(f"\nü§ñ –®–ê–ì 3: –û–ë–£–ß–ï–ù–ò–ï TAPRANSFORMER –ú–û–î–ï–õ–ò")
    print("=" * 80)
    
    # –ò–∑–º–µ–Ω—è–µ–º tap_transformer_model.py —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    train_cmd = f"python3 -c \"import tap_transformer_model; tap_transformer_model.main('combined_training_data.json')\""
    
    if not run_command(train_cmd, "–û–±—É—á–µ–Ω–∏–µ TapTransformer –º–æ–¥–µ–ª–∏"):
        print("‚ùå –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞
    if not os.path.exists('best_model.pth') or not os.path.exists('encoders.pkl'):
        print("‚ùå –ú–æ–¥–µ–ª—å –∏–ª–∏ —ç–Ω–∫–æ–¥–µ—Ä—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        return False
    
    print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
    
    # –®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
    print(f"\nüéØ –®–ê–ì 4: –§–ò–ù–ê–õ–¨–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –° –û–ë–£–ß–ï–ù–ù–û–ô –ú–û–î–ï–õ–¨–Æ ({args.final_paths} –ø—É—Ç–µ–π)")
    print("=" * 80)
    
    final_cmd = f"python3 smart_bruteforce.py {args.url} --max-paths {args.final_paths} --delay {args.delay} --threads {args.threads} --output final_scan_results.json"
    
    if not run_command(final_cmd, "–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é"):
        print("‚ùå –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False
    
    # –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    print(f"\nüìä –®–ê–ì 5: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê")
    print("=" * 80)
    
    if os.path.exists('final_scan_results.json'):
        report_cmd = f"python3 vulnerability_report.py --input final_scan_results.json --format both"
        run_command(report_cmd, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    print(f"\nüéâ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 80)
    print(f"üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
    print(f"   ‚Ä¢ final_scan_results.json - JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print(f"   ‚Ä¢ vulnerability_report.html - HTML –æ—Ç—á–µ—Ç")  
    print(f"   ‚Ä¢ vulnerability_report.txt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç")
    print(f"   ‚Ä¢ best_model.pth - –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
    print(f"   ‚Ä¢ encoders.pkl - –≠–Ω–∫–æ–¥–µ—Ä—ã")
    print("=" * 80)
    
    return True


if __name__ == '__main__':
    try:
        success = main()
        if success:
            print("üéØ –í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 